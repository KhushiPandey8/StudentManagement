in this code i want to show attendance when user click on page name Timetable.jsx attendance view btn of any subjects it will redirected to Attendance.jsx page i also give you my attendance controller in there i want to whole details according to batchtiming and faculty and subject and also subject all three must be required and other data will also fetch  in 
this is my Timetable.jsx code
import React, { useEffect, useState } from "react";
import axios from "axios";
import Image from "./Image";
import Footer from "./Footer";
import Logo from "./Logo";
import { useNavigate } from "react-router-dom";

function Timetable() {
  const [courses, setCourses] = useState([]);
  const [selectedCourse, setSelectedCourse] = useState("");
  const [filteredSubjects, setFilteredSubjects] = useState([]);
  const [selectedStatus, setSelectedStatus] = useState("Pursuing");
  const navigate = useNavigate();
  useEffect(() => {
    const fetchCourseDetails = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get("http://localhost:3001/get-batch", {
          headers: { Authorization: `Bearer ${token}` },
        });

        console.log("Fetched Data:", response.data);
        setCourses(response.data);
        filterByStatus("Pursuing"); // Default to Pursuing status
      } catch (error) {
        console.error("Error fetching course details", error);
      }
    };
    fetchCourseDetails();
  }, []);

  const filterByStatus = (status) => {
    setSelectedStatus(status);
    const filtered = courses.filter((sub) => sub.status === status);
    setFilteredSubjects(filtered);
  };

  const handleViewAttendance = (batchTime, subject) => {
    navigate(`/attend?batchtime=${batchTime}`);
    console.log(`Viewing attendance for ${subject} at ${batchTime}`);
  };

  return (
    <div className="inset-0 h-screen w-screen flex flex-col md:flex-row font-mono">
      <div className="w-full md:w-[60%] flex flex-col items-center bg-white shadow-md h-full">
        <Logo />
        <div className="mt-5 flex-1 overflow-y-auto w-full flex flex-col items-center p-4">
          <h1 className="text-2xl text-center font-bold mb-4">My Course Details</h1>

          <select
            className="border p-2 rounded mb-4"
            value={selectedCourse}
            onChange={(e) => setSelectedCourse(e.target.value)}
          >
            <option value="">Select a Course</option>
            {Array.from(
              new Set(
                courses
                  .filter(
                    (course) =>
                      course.course !== "COURSE" &&
                      course.subjectname !== "SUBJECTS"
                  )
                  .map((c) => c.course)
              )
            ).map((course, index) => (
              <option key={index} value={course}>
                {course}
              </option>
            ))}
          </select>

          <div className="flex gap-4 mb-6">
            {["Pending", "Pursuing", "Completed"].map((status) => (
              <button
                key={status}
                className={`px-4 py-2 rounded ${
                  selectedStatus === status
                    ? "bg-gray-800 text-white"
                    : "bg-gray-300"
                }`}
                onClick={() => filterByStatus(status)}
              >
                {status}
              </button>
            ))}
          </div>

          <div className="w-[1000px] overflow-x-auto">
            <table className="w-full border-collapse border border-gray-300">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border p-3">Subject Name</th>
                  {selectedStatus !== "Pending" && (
                    <>
                      <th className="border p-3">Batch Time</th>
                      <th className="border p-3">Faculty</th>
                      <th className="border p-3">Start Date</th>
                      <th className="border p-3">End Date</th>
                    </>
                  )}
                  <th className="border p-3">Action</th>
                </tr>
              </thead>
              <tbody>
                {filteredSubjects
                  .filter(
                    (sub) =>
                      selectedCourse === "" || sub.course === selectedCourse
                  )
                  .map((sub, index) => (
                    <tr key={index} className="text-center">
                      <td className="border p-3">{sub.subjectname}</td>
                      {selectedStatus !== "Pending" && (
                        <>
                          <td className="border p-3">{sub.batch_time || "N/A"}</td>
                          <td className="border p-3">{sub.faculty || "N/A"}</td>
                          <td className="border p-3">{sub.startdate || "N/A"}</td>
                          <td className="border p-3">{sub.endate || "N/A"}</td>
                        </>
                      )}
                      <td className="p-2 text-center">
                        <button
                          className="bg-blue-600 text-white px-3 py-1 rounded-md"
                          onClick={() =>
                            handleViewAttendance(
                              sub.batch_time,
                              sub.subjectname
                            )
                          }
                        >
                          View Attendance
                        </button>
                      </td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>
        </div>
        <Footer />
      </div>
      <Image />
    </div>
  );
}

export default Timetable; 
Attendance.jsx code
import React, { useEffect, useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { useSelector } from "react-redux";
import Logo from "./Logo";
import Image from "./Image";
import Footer from "./Footer";

function Attendance() {
  const [attendance, setAttendance] = useState([]);
  const { user, token } = useSelector((state) => state.auth);
  const navigate = useNavigate();
  const location = useLocation();
  const params = new URLSearchParams(location.search);
  const batchtime = params.get("batchtime");

  useEffect(() => {
    if (!user || !token || !batchtime) {
      navigate("/login");
      return;
    }

    fetch(`http://localhost:3001/attendance?batchtime=${batchtime}`, {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((res) => res.json())
      .then((data) => setAttendance(data))
      .catch((err) => console.error(err));
  }, [navigate, user, token, batchtime]);

  return (
    <div className="inset-0 h-screen w-screen flex flex-col md:flex-row font-mono">
      <div className="w-full md:w-[60%] flex flex-col items-center bg-white shadow-md h-full">
        <Logo />
        <h1 className="text-2xl font-bold text-gray-800 mb-4 mt-5">
          Attendance Details
        </h1>
        <div className="flex flex-wrap justify-evenly items-center my-6 gap-2">
          <h2 className="font-bold text-lg">Subject:</h2>
          <p className="mr-5">{attendance?.[0]?.Subject || "N/A"}</p>
          <h2 className="font-bold text-lg">Faculty:</h2>
          <p className="mr-5">{attendance?.[0]?.faculty || "N/A"}</p>
          <h2 className="font-bold text-lg">Start Date:</h2>
          <p className="mr-5">{attendance?.[0]?.startdate ? new Date(attendance?.[0]?.startdate).toLocaleDateString("en-GB")
                        : "N/A"}</p>
          <h2 className="font-bold text-lg">End Date:</h2>
          <p className="mr-5">{attendance?.[0]?.endate ? new Date(attendance?.[0]?.endate).toLocaleDateString("en-GB") : "N/A"}</p>
        </div>

        {/* Responsive Table */}
        <div className="w-full overflow-x-auto px-4">
          <table className="w-full border-collapse border border-gray-300 text-sm md:text-base">
            <thead>
              <tr className="bg-gray-100 text-gray-700">
                <th className="p-3 text-center border">Date</th>
                <th className="p-3 text-center border">Topic</th>
                <th className="p-3 text-center border">Status</th>
              </tr>
            </thead>
            <tbody>
              {attendance.length > 0 ? (
                attendance.map((record, index) => (
                  <tr key={index} className="border-b hover:bg-gray-100">
                    <td className="p-3 text-center border">{record.date}</td>
                    <td className="p-3 text-center border">{record.topic}</td>
                    <td
                      className={`p-3 text-center font-semibold border ${
                        record.attendence === "Present"
                          ? "text-green-600"
                          : "text-red-600"
                      }`}
                    >
                      {record.attendence}
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan="3"
                    className="text-center text-gray-500 py-4 border"
                  >
                    No attendance records found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        <Footer />
      </div>
      <Image />
    </div>
  );
}

export default Attendance;

controller for attendance
export const getAttendance = (req, res) => {
  const { batchtime } = req.query;
  const { name_contactid } = req.user;

  if (!batchtime || !name_contactid) {
    return res.status(400).json({ message: "Missing batchtime or user info." });
  }

  const query = `
    SELECT a.date, a.topic, a.attendence, a.Subject , a.batchtime , fs.faculty, fs.startdate, fs.endate
    FROM attendence a
    JOIN faculty_student fs ON a.batchtime = fs.batch_time AND a.Subject = fs.subject AND a.course = fs.course
    WHERE fs.nameid = ? AND fs.batch_time = ?;
  `;

  db.query(query, [name_contactid, batchtime], (err, results) => {
    if (err) {
      console.error("Error fetching attendance:", err);
      return res.status(500).json({ message: "Database error" });
    }
    res.json(results);
  });
};
 